    ESCOPO

    O escopo pode ser entendido como o ambiente onde uma variável pode ser acessada.
Em Java, o escopo de variáveis vai de acordo com o bloco onde ela foi declarada.

    A variável é criada no primeiro acesso à ela, se tornando inacessível após o
interpretador sair do bloco de execução ao qual ela pertence. Portanto, esta variável
não pode ser lida ou manipulada por rotinas e códigos que estão fora do seu bloco
de declaração, ou seja, fora do escopo da variável.

    Em uma Classe, podemos vizualizar a diferença de escopos. Os atributos (variáveis)
são declarados no corpo principal da Classe, sendo, portanto, acessíveis por todos os
métodos.

    Caso você declare uma variável DENTRO DE UM MÉTODO, o escopo desta variável está
limitado apenas ao corpo deste método, ou seja, dentro das chaves que limitam o método.

    Uma parte fundamental na elaboração de algoritmos, simples ou complexos, é
determinar a localização do código em questão. Sem um domínio sobre o escopo de
códigos, seu projeto tende a conter falhas estruturais e comprometer a proposta
principal da aplicação.

    Exemplo:
    public class Conta {
        // Variável da classe Conta
        double saldo = 10.0;

        public void sacar(Double valor) {
            // Variável local de método
            double novoSaldo = saldo - valor;
        }

        public void imprimirSaldo() {
            // Disponível em toda a classe
            System.out.println(saldo);
            // Somente o métod sacar conhece esta variável
            System.out.println(novoSaldo);
        }

        public double calcularDividaExponencial() {
            // Variável local de método
            double valorParcela = 50.0;
            double valorMontante = 0.0; 
            for (int x = 1; x <= 5; x++) {
                double valorCalculado = valorParcela * x;
                valorMontante = valorMontante + valorCalculado;
            }
            // Escopo de fluxo
            // x e valorCalculado nunca estarão disponíveis fora 

            return valorMontante;
        }
    }